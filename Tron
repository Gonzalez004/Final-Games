#include <iostream>
#include <allegro5/allegro.h>
#include<allegro5/allegro_primitives.h>

using namespace std;
int PlattformCollide(int X,int Y, int dir, int Map[50][50]);
// Starting point of the Player.
int Square_X = 500;
int Square_Y = 500;
enum directions { Up, Down, Left, Right };

/*class Trail {
public:
	void InitTrail(int XPos, int YPos);
	void Draw();
	//int Brick::collision(int b2_x, int b2_y, int b2_w, int b2_h);
private:
	int X;
	int Y;
};*/
int main() {

	//Setting up Map/Matrix
	int Map[50][50];
	for (int i = 0; i < 50; i++)
		for (int j = 0; j < 50; j++) {
		Map[i][j] = 0;
		if (i == 0 || i == 49 || j == 0 || j == 49)
			Map[i][j] = 1;
			}
	//Prints out Matrix
	for (int i = 0; i < 50; i++) {
		for (int j = 0; j < 50; j++)
			cout << Map[i][j];
			cout << endl;
	}

	al_init();
	al_init_primitives_addon();
	al_install_keyboard();
	//Setting Up Variables
	ALLEGRO_DISPLAY *Display = NULL;
	ALLEGRO_EVENT_QUEUE *Event_Queue = NULL;
	ALLEGRO_TIMER *Timer = NULL;
	ALLEGRO_BITMAP *Square = NULL;
	ALLEGRO_BITMAP *Wall = NULL;
	bool key[4] = { false, false, false, false };
	const int TronSize = 20;
	const int WALLSIZE = 20;

	//Player Speed
	int Velocity_X = 0;
	int Velocity_Y = 0;
	int Dir = 0;

	//don't redraw until an event happens
	bool Redraw = true;

	//this controls our game loop
	bool Doexit = false;

	//set the timer so it "ticks" at 2 milliseconds
	Timer = al_create_timer(.02);

	//Creates the Display and Position its in
	Display = al_create_display(1000, 1000);
	al_set_window_position(Display, 0, 0);

	//create a little 32x32 square
	Square = al_create_bitmap(TronSize, TronSize);
	al_set_target_bitmap(Square);
	al_clear_to_color(al_map_rgb(255, 255, 0));
	al_set_target_bitmap(al_get_backbuffer(Display));
	Event_Queue = al_create_event_queue();
	//creating wall
	Wall = al_create_bitmap(WALLSIZE, WALLSIZE);
	al_set_target_bitmap(Wall);
	al_clear_to_color(al_map_rgb(0, 255, 255));
	al_set_target_bitmap(al_get_backbuffer(Display));
	Event_Queue = al_create_event_queue();

	al_register_event_source(Event_Queue, al_get_display_event_source(Display));
	al_register_event_source(Event_Queue, al_get_keyboard_event_source());
	
	//register the timer as an event source so it can generate events
	al_register_event_source(Event_Queue, al_get_timer_event_source(Timer));
	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	//Starts the Timer
	al_start_timer(Timer);


	while (!Doexit)
	{
		ALLEGRO_EVENT ev;
		//this function will wait forever if no events come in
		al_wait_for_event(Event_Queue, & ev);

		//sets this part of the game to run on the clicks of the timer 
		if (ev.type == ALLEGRO_EVENT_TIMER) {

			if (key[Up]) {
				Velocity_Y = -2;
				Velocity_X = 0;
				//Square_Y -= 4.0;
				Dir = Up;
			}
			if (key[Down]) {
				Velocity_Y = 2;
				Velocity_X = 0;
				//Square_Y += 4.0;
				Dir = Down;
			}
			if (key[Left]) {
				Velocity_Y = 0;
				Velocity_X = -2;
				//Square_X -= 4.0;
				Dir = Left;
			}
			if (key[Right]) {
				Velocity_Y = 0;
				Velocity_X = 2;
				//Square_X += 4.0;
				Dir = Right;
			}
			if (PlattformCollide(Square_X, Square_Y, 0, Map)) {
				Square_X = 500;
				Square_Y = 500;
			}
			//Move Player based on the Velocity
			Square_X += Velocity_X;
			Square_Y += Velocity_Y;
			//Draw a line behind the Player
		//	Map[(Square_X) / 20][(Square_Y) / 20] = 2;

			//Collsion for The other lines
			//Down collision
			if (((Map[(Square_X) / 20][(Square_Y + 20 + 5) / 20] != 0) && Dir == Down) || ((Map[(Square_X + 20) / 20][(Square_Y + 20 + 5) / 20] != 0) && Dir == Down) || ((Map[(Square_X + 10) / 20][(Square_Y + 20 + 5) / 20] != 0) && Dir == Down)) {
				cout << "Collision" << endl;
			}
			//Up collision
			if (((Map[(Square_X) / 20][(Square_Y - 5) / 20] != 0) && Dir == Up) || ((Map[(Square_X + 20) / 20][(Square_Y - 5) / 20] != 0) && Dir == Up) || ((Map[(Square_X + 10) / 20][(Square_Y - 5) / 20] != 0) && Dir == Up)) {
				cout << "Collision" << endl;
			}
			//Left collision
			if (((Map[(Square_X - 5) / 20][(Square_Y) / 20] != 0) && Dir == Left) || ((Map[(Square_X - 5) / 20][(Square_Y + 20) / 20] != 0) && Dir == Left) || ((Map[(Square_X - 5) / 20][(Square_Y + 10) / 20] != 0) && Dir == Left)) {
				cout << "Collision" << endl;
			}
			//Right collision
			if (((Map[(Square_X + 20 + 5) / 20][(Square_Y) / 20] != 0) && Dir == Right) || ((Map[(Square_X + 20 + 5) / 20][(Square_Y + 20) / 20] != 0) && Dir == 3) || ((Map[(Square_X + 20 + 5) / 20][(Square_Y + 10) / 20] != 0) && Dir == Right)) {
				cout << "Collision" << endl;
			}

			/*if (key[Up] && !PlattformCollide(Square_X, Square_Y, 0, Map)) {
				Square_Y -= 4.0;
				Dir = Up;
			}
			if (key[Down] && !PlattformCollide(Square_X, Square_Y, 1, Map)) {
				Square_Y += 4.0;
				Dir = Down;
			}
			if (key[Left] && !PlattformCollide(Square_X, Square_Y, 2, Map)) {
				Square_X -= 4.0;
				Dir = Left;
			}
			if (key[Right] && !PlattformCollide(Square_X, Square_Y, 3, Map)) {
				Square_X += 4.0;
				Dir = Right;
			}
			*/

			Redraw = true;
		}

		//////////////////////////////////////////////////////////////////
		//kill program if the user clicks the exit button
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		//has something been pressed on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {
				//if the Up key has been pressed
			case ALLEGRO_KEY_UP:
				key[0] = true;
				break;
				//if the Down key has been pressed
			case ALLEGRO_KEY_DOWN:
				key[1] = true;
				break;
				//if the Left key has been pressed
			case ALLEGRO_KEY_LEFT:
				key[2] = true;
				break;
				//if the Right key has been pressed
			case ALLEGRO_KEY_RIGHT:
				key[3] = true;
				break;
			}
		}
		//has something been released on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[0] = false;
				break;
			case ALLEGRO_KEY_DOWN:
				key[1] = false;
				break;
			case ALLEGRO_KEY_LEFT:
				key[2] = false;
				break;
			case ALLEGRO_KEY_RIGHT:
				key[3] = false;
				break;
				//kill the program if someone presses escape
			case ALLEGRO_KEY_ESCAPE:
				Doexit = true;
				break;
			}
		}
		//render section: draws stuff
		//if you were supposed to redraw but there wasn't an event, don't redraw
		if (Redraw && al_is_event_queue_empty(Event_Queue)) {
			Redraw = false;
			al_clear_to_color(al_map_rgb(0, 0, 0));

			for (int i = 0; i < 50; i++) {
				for (int j = 0; j < 50; j++) {
					al_draw_rectangle(i*20,j*20, i*20+20, j*20+20, al_map_rgb(50,80,90 ),1);
					if (Map[i][j] == 1) {
						al_draw_bitmap(Wall, j * 20, i * 20, 0);
						}
					if (Map[i][j] == 2) {
						al_draw_filled_rectangle(i * 20, j * 20, i * 20 + 20, j * 20 + 20, al_map_rgb(50, 80, 90));
						}
					}
				}
			//actually Draws the square
			al_draw_bitmap(Square, Square_X, Square_Y, 0);

			al_flip_display();

		}
	}//end game loop
	al_destroy_bitmap(Square);
	al_destroy_timer(Timer);
	al_destroy_display(Display);
	al_destroy_bitmap(Wall);
	al_destroy_event_queue(Event_Queue);

	return 0;
}
int PlattformCollide(int X, int Y, int dir, int Map[50][50]) {
	enum directions { Up, Down, Left, Right };
	//Down collision
	if (((Map[(X) / 20][(Y + 20 + 5) / 20] == 1) && dir == Down) || ((Map[(X + 20) / 20][(Y + 20 + 5) / 20] == 1) && dir == Down) || ((Map[(X + 10) / 20][(Y + 20 + 5) / 20] == 1) && dir == Down)) {
		cout << "Collision" << endl;
		return 1;
	}
	//Up collision
	if (((Map[(X) / 20][(Y - 5) / 20] == 1) && dir == Up) || ((Map[(X + 20) / 20][(Y - 5) / 20] == 1) && dir == Up) || ((Map[(X + 10) / 20][(Y - 5) / 20] == 1) && dir == Up)) {
		cout << "Collision" << endl;
		return 1;
	}
	//Left collision
	if (((Map[(X - 5) / 20][(Y) / 20] == 1) && dir == Left) || ((Map[(X - 5) / 20][(Y + 20) / 20] == 1) && dir == Left) || ((Map[(X - 5) / 20][(Y + 10) / 20] == 1) && dir == Left)) {
		cout << "Collision" << endl;
		return 1;
	}
	//Right collision
	if (((Map[(X + 20 + 5) / 20][(Y) / 20] == 1) && dir == Right) || ((Map[(X + 20 + 5) / 20][(Y + 20) / 20] == 1) && dir == 3) || ((Map[(X + 20 + 5) / 20][(Y + 10) / 20] == 1) && dir == Right)) {
		cout << "Collision" << endl;
		return 1;
	}
	else
		return 0;
}

/*void Trail::InitTrail(int XPos, int YPos){
	X = XPos;
	Y = YPos;
}
void Trail::Draw(){
	for (int i = 0; i < 50; i++) {
		for (int j = 0; j < 50; j++) {
			al_draw_filled_rectangle(i * 20, j * 20, i * 20 + 20, j * 20 + 20, al_map_rgb(50, 80, 90));
		}
	}
}*/
