
#include <stdio.h>
#include <allegro5/allegro.h>
#include <iostream>

using namespace std;

int collision(int b1_x, int b1_y, int b1_w, int b1_h, int b2_x, int b2_y, int b2_w, int b2_h);
int height = 110;
int height1 = 110;

int main(int argc, char **argv)
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	ALLEGRO_BITMAP *square = NULL;
	ALLEGRO_BITMAP *square1 = NULL;
	ALLEGRO_BITMAP *bouncer = NULL;

	//these two variables hold the x and y positions of the square
	//initalize these variables to where you want your square to start
	float square_x = 20;
	float square_y = 195;
	float square1_x = 610;
	float square1_y = 195;
	float bouncer_x = 320;
	float bouncer_y = 240;

	//here's the bouncer's x and y directions, initially set to -4, 4
	float bouncer_dx = -4.0, bouncer_dy = 4.0;
	bool redraw = true;

	//here's our key states. they're all starting as "false" because nothing has been pressed yet.
	//the first slot represents "up", then "down", "left" and "right"
	bool key[4] = { false, false, false, false };
	bool key1[4] = { false, false, false, false };


	//don't redraw until an event happens
	//bool redraw = true;

	//this controls our game loop
	bool doexit = false;

	al_init();

	//get the keyboard ready to use
	al_install_keyboard();

	timer = al_create_timer(.01);

	display = al_create_display(640, 480);

	square = al_create_bitmap(15, 110);
	square1 = al_create_bitmap(15, 110);
	bouncer = al_create_bitmap(15, 15);


	al_set_target_bitmap(square);
	al_clear_to_color(al_map_rgb(500, 0, 0));
	al_set_target_bitmap(square1);
	al_clear_to_color(al_map_rgb(0, 0, 500));

	al_set_target_bitmap(bouncer);
	al_clear_to_color(al_map_rgb(50, 510, 50));

	al_set_target_bitmap(al_get_backbuffer(display));

	event_queue = al_create_event_queue();

	al_register_event_source(event_queue, al_get_display_event_source(display));

	al_register_event_source(event_queue, al_get_timer_event_source(timer));

	//tell the event queue that it should take keyboard events, too 
	al_register_event_source(event_queue, al_get_keyboard_event_source());

	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	al_start_timer(timer);

	while (!doexit)
	{

		ALLEGRO_EVENT ev;
		al_wait_for_event(event_queue, &ev);
		//cout << square_y << endl;

		if (ev.type == ALLEGRO_EVENT_TIMER) {
			//if the box hits the left wall OR the right wall
			if (bouncer_x < 0 || bouncer_x > 640 - 15) {
				//flip the x direction
				bouncer_dx = -bouncer_dx;
			}
			//if the box hits the top wall OR the bottom wall
			if (bouncer_y < 0 || bouncer_y > 480 - 15) {
				//flip the y direction
				bouncer_dy = -bouncer_dy;
			}

			//really important code!
			//move the box in a diagonal
			bouncer_x += bouncer_dx;
			bouncer_y += bouncer_dy;

			//if an event happened, you better redraw
			redraw = true;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////
		//here's the movement algorithm

		if (ev.type == ALLEGRO_EVENT_TIMER) {
			//if the up button is pressed AND we're still below the top wall,
			//move the box "up" by 4 pixels
			if (key[0] && square_y >= 0) {
				square_y -= 4.0;
			}


			//if the down button is pressed AND we're still above the bottom wall
			//move the box "down" by 4 pixels
			if (key[1] && square_y <= 480 - 110) {
				square_y += 4.0;
			}
			//if the left button is pressed AND we're still right of the left wall
			//move the box left by 4 pixels
			if (key1[0] && square1_y >= 0) {
				square1_y -= 4.0;
			}

			//if the left button is pressed AND we're still left of the right wall
			//move the box right by 4 pixels
			if (key1[1] && square1_y <= 480 - 110) {
				square1_y += 4.0;
			}

			//redraw at every tick of the timer
			redraw = true;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		//here's the algorithm that turns key presses into events
		//a "key down" event is when a key is pushed
		//while a "key up" event is when a key is released

		//has something been pressed on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {

			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {

				//if the up key has been pressed
			case ALLEGRO_KEY_W:
				key[0] = true;
				break;

				//if the down key has been pressed
			case ALLEGRO_KEY_S:
				key[1] = true;
				break;

				//if the left key has been pressed
			case ALLEGRO_KEY_UP:
				key1[0] = true;
				break;

				//if the right key has been pressed
			case ALLEGRO_KEY_DOWN:
				key1[1] = true;
				break;
			}
		}
		//has something been released on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_W:
				key[0] = false;
				break;

			case ALLEGRO_KEY_S:
				key[1] = false;
				break;

			case ALLEGRO_KEY_UP:
				key1[0] = false;
				break;

			case ALLEGRO_KEY_DOWN:
				key1[1] = false;
				break;

				//kill the program if someone presses escape
			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}

		if (collision(bouncer_x, bouncer_y, 15, 15, square_x, square_y, 15, 110) == 1)
		{

			bouncer_dx = -bouncer_dx; height = -5;

		}
		if (collision(bouncer_x, bouncer_y, 15, 15, square1_x, square1_y, 15, 110) == 1)
		{
			bouncer_dx = -bouncer_dx;
		}
		//if the clock ticked but no other events happened, don't bother redrawing
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;

			//paint black over the old screen, so the old square dissapears
			al_clear_to_color(al_map_rgb(0, 0, 0));

			//the algorithm above just changes the x and y coordinates
			//here's where the bitmap is actually drawn somewhere else
			al_draw_bitmap(square, square_x, square_y, 0);
			al_draw_bitmap(square1, square1_x, square1_y, 0);
			al_draw_bitmap(bouncer, bouncer_x, bouncer_y, 0);

			al_flip_display();
		}
	}

	al_destroy_bitmap(square);
	al_destroy_bitmap(square1);
	al_destroy_bitmap(bouncer);
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}
int collision(int b1_x, int b1_y, int b1_w, int b1_h, int b2_x, int b2_y, int b2_w, int b2_h)
{
	if ((b1_x > b2_x + b2_w - 1) || //box 2 is to the LEFT of box 1
		(b1_y > b2_y + b2_h - 1) || //box 2 is ABOVE box 1
		(b2_x  > b1_x + b1_w - 1) ||//box 2 is to the RIGHT of box1
		(b2_y > b1_y + b1_h - 1)) //box 2 is BELOW box 1
	{
		return 0;
	}
	else
	{
		return 1;
	}

}
